# app_gradio.py

import os
import logging
import gradio as gr
from anonimizador_core import AnonimizadorCore # Apenas o Core √© necess√°rio

# Configurar logging
logging.basicConfig(
    level=logging.INFO, # Alterado para INFO para uma sa√≠da menos verbosa em produ√ß√£o
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# REMOVIDO: A fun√ß√£o processar_documento que existia aqui foi removida
# pois a l√≥gica agora est√° 100% no AnonimizadorCore.

def anonimizar_documento_interface(arquivo, modelo_llm, chave_api):
    """
    Fun√ß√£o "ponte" que a interface Gradio chama.
    Ela √© respons√°vel por instanciar o Core e chamar o m√©todo de processamento.
    """
    try:
        if arquivo is None:
            logger.warning("Tentativa de processar sem arquivo.")
            return "‚ùå Por favor, selecione um arquivo para anonimizar."
        
        caminho_do_arquivo = arquivo.name
        logger.info(f"Processando arquivo: {caminho_do_arquivo}")
        
        # Verificar se o arquivo existe (boa pr√°tica)
        if not os.path.exists(caminho_do_arquivo):
            logger.error(f"Arquivo n√£o encontrado no sistema: {caminho_do_arquivo}")
            return "‚ùå Arquivo n√£o encontrado no sistema."
            
        # Inicializar o motor de anonimiza√ß√£o
        anonimizador = AnonimizadorCore()
        
        # Processar o documento usando a l√≥gica centralizada do Core
        # Note que n√£o precisamos mais saber o tipo do arquivo aqui.
        logger.info(f"Iniciando processamento com o motor Core...")
        resultado = anonimizador.processar_documento(caminho_do_arquivo, modelo_llm, chave_api)
        
        if resultado.startswith("‚ùå") or resultado.startswith("‚ö†Ô∏è"):
            logger.error(f"Erro ou aviso no processamento: {resultado}")
        else:
            logger.info("Documento processado com sucesso.")
            
        return resultado
        
    except Exception as e:
        logger.exception("Erro inesperado durante a anonimiza√ß√£o na interface.")
        return f"‚ùå Erro cr√≠tico durante a anonimiza√ß√£o: {str(e)}"

# Configura√ß√£o da interface (permanece praticamente a mesma)
with gr.Blocks(title="AnonimizaJud - Gradio", theme=gr.themes.Soft()) as interface:
    gr.Markdown("# üöÄ AnonimizaJud - Anonimizador de Documentos")
    gr.Markdown("### Vers√£o Gradio - Interface Simplificada com Presidio Avan√ßado")
    gr.Markdown("**üîí Anonimiza√ß√£o autom√°tica usando Microsoft Presidio com configura√ß√£o avan√ßada para portugu√™s brasileiro**")
    
    with gr.Row():
        with gr.Column(scale=2):
            gr.Markdown("### üì§ **Upload e Configura√ß√£o**")
            
            arquivo = gr.File(
                label="üìÑ Upload do Documento",
                file_types=[".pdf", ".txt", ".docx"], # Tipos de arquivo permitidos
                height=100
            )
            
            # Opcionais para futuras implementa√ß√µes com LLMs
            modelo_llm = gr.Dropdown(
                choices=["GPT-4", "Claude", "Gemini", "Groq", "Ollama"],
                value="GPT-4",
                label="ü§ñ Modelo LLM (opcional, n√£o usado na anonimiza√ß√£o Presidio)"
            )
            
            chave_api = gr.Textbox(
                label="üîë Chave API (opcional)",
                type="password",
                placeholder="Digite sua chave API se o modelo exigir..."
            )
            
            btn_processar = gr.Button(
                "üöÄ Anonimizar Documento",
                variant="primary",
                size="lg"
            )
            
            gr.Markdown("---")
            gr.Markdown("### ‚ÑπÔ∏è **Como usar:**")
            gr.Markdown("1. üì§ Fa√ßa upload do seu documento (`.pdf`, `.txt` ou `.docx`).")
            gr.Markdown("2. üöÄ Clique em 'Anonimizar Documento'.")
            gr.Markdown("3. üìã O resultado anonimizado aparecer√° ao lado.")
        
        with gr.Column(scale=3):
            gr.Markdown("### üìã **Resultado da Anonimiza√ß√£o**")
            
            resultado_textbox = gr.Textbox(
                label="Resultado",
                lines=25,
                max_lines=30,
                interactive=False,
                show_label=False
            )
            
            gr.Markdown("---")
            gr.Markdown("### üîç **Sobre a Tecnologia (Microsoft Presidio):**")
            gr.Markdown("‚Ä¢ **Detec√ß√£o autom√°tica** de Nomes, CPFs, RGs, OABs, Endere√ßos, etc.")
            gr.Markdown("‚Ä¢ **Regras personalizadas** para o contexto jur√≠dico e administrativo brasileiro.")
            gr.Markdown("‚Ä¢ **Listas de exce√ß√µes** para evitar a anonimiza√ß√£o de termos comuns e nomes de locais p√∫blicos (estados, capitais).")

    # Eventos
    btn_processar.click(
        fn=anonimizar_documento_interface,
        inputs=[arquivo, modelo_llm, chave_api],
        outputs=resultado_textbox
    )

# Lan√ßar a aplica√ß√£o
if __name__ == "__main__":
    print("üöÄ Iniciando a interface do AnonimizaJud...")
    # ... (bloco try/except para portas permanece o mesmo) ...
    try:
        interface.launch(server_name="0.0.0.0", server_port=7860, share=False, debug=True)
    except OSError:
        print("‚ö†Ô∏è Porta 7860 ocupada, tentando porta 7861...")
        try:
            interface.launch(server_name="0.0.0.0", server_port=7861, share=False, debug=True)
        except OSError:
            print("‚ö†Ô∏è Portas 7860 e 7861 ocupadas, usando porta autom√°tica...")
            interface.launch(server_name="0.0.0.0", share=False, debug=True)