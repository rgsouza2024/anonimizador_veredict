import gradio as gr
import os
import sys
from pathlib import Path
import json
import time
from datetime import datetime
import pandas as pd
from PIL import Image
import base64
import io

# Adicionar o diret√≥rio pai ao path para importar o m√≥dulo anonimizador
sys.path.append(str(Path(__file__).parent.parent))
from anonimizador import Anonimizador

# Configura√ß√µes globais
TITLE = "üîí AnonimizaJud - Sistema de Anonimiza√ß√£o para Documentos Jur√≠dicos"
DESCRIPTION = """
Sistema inteligente de anonimiza√ß√£o de documentos jur√≠dicos utilizando IA para proteger dados sens√≠veis.
Desenvolvido para uso em processos judiciais, garantindo conformidade com LGPD e sigilo profissional.
"""

# Inicializar o anonimizador
anonimizador = Anonimizador()

def create_header():
    """Cria o cabe√ßalho da aplica√ß√£o"""
    return gr.HTML("""
    <div style="
        background: linear-gradient(135deg, #1f4e79 0%, #2d5a8b 100%);
        color: white;
        padding: 2rem;
        border-radius: 12px;
        margin-bottom: 2rem;
        text-align: center;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    ">
        <h1 style="margin: 0; font-size: 2.5rem; font-weight: 700; text-shadow: 0 2px 4px rgba(0,0,0,0.1);">
            üîí AnonimizaJud
        </h1>
        <p style="margin: 0.5rem 0 0 0; font-size: 1.1rem; opacity: 0.9;">
            Sistema de Anonimiza√ß√£o para Documentos Jur√≠dicos
        </p>
        <p style="margin: 0.5rem 0 0 0; font-size: 0.9rem; opacity: 0.8;">
            Prote√ß√£o inteligente de dados sens√≠veis com conformidade LGPD
        </p>
    </div>
    """)

def anonimizar_texto(texto, modelo_llm, chave_api, nivel_anonimizacao, idioma):
    """Fun√ß√£o para anonimizar texto"""
    try:
        if not texto.strip():
            return "‚ùå Por favor, insira um texto para anonimizar.", None, None
        
        # Configurar o modelo LLM
        if chave_api:
            anonimizador.configurar_modelo_llm(modelo_llm, chave_api)
        
        # Realizar anonimiza√ß√£o
        resultado = anonimizador.anonimizar_texto(
            texto, 
            nivel_anonimizacao=nivel_anonimizacao,
            idioma=idioma
        )
        
        if resultado:
            texto_anonimizado = resultado.get('texto_anonimizado', '')
            entidades_detectadas = resultado.get('entidades_detectadas', [])
            estatisticas = resultado.get('estatisticas', {})
            
            # Formatar estat√≠sticas
            stats_text = f"""
            üìä **Estat√≠sticas da Anonimiza√ß√£o:**
            ‚Ä¢ Entidades detectadas: {len(entidades_detectadas)}
            ‚Ä¢ Palavras processadas: {estatisticas.get('palavras_processadas', 0)}
            ‚Ä¢ Tempo de processamento: {estatisticas.get('tempo_processamento', 0):.2f}s
            ‚Ä¢ Confian√ßa m√©dia: {estatisticas.get('confianca_media', 0):.2f}%
            """
            
            return texto_anonimizado, stats_text, entidades_detectadas
        else:
            return "‚ùå Erro na anonimiza√ß√£o. Verifique os par√¢metros.", None, None
            
    except Exception as e:
        return f"‚ùå Erro: {str(e)}", None, None

def anonimizar_arquivo(arquivo, modelo_llm, chave_api, nivel_anonimizacao, idioma):
    """Fun√ß√£o para anonimizar arquivo"""
    try:
        if not arquivo:
            return "‚ùå Por favor, selecione um arquivo para anonimizar.", None, None, None
        
        # Ler o arquivo
        if arquivo.name.endswith('.txt'):
            with open(arquivo.name, 'r', encoding='utf-8') as f:
                texto = f.read()
        elif arquivo.name.endswith('.pdf'):
            # Aqui voc√™ pode adicionar l√≥gica para PDF se necess√°rio
            return "‚ùå Suporte a PDF ser√° implementado em breve.", None, None, None
        else:
            return "‚ùå Formato de arquivo n√£o suportado. Use arquivos .txt", None, None, None
        
        # Configurar o modelo LLM
        if chave_api:
            anonimizador.configurar_modelo_llm(modelo_llm, chave_api)
        
        # Realizar anonimiza√ß√£o
        resultado = anonimizador.anonimizar_texto(
            texto, 
            nivel_anonimizacao=nivel_anonimizacao,
            idioma=idioma
        )
        
        if resultado:
            texto_anonimizado = resultado.get('texto_anonimizado', '')
            entidades_detectadas = resultado.get('entidades_detectadas', [])
            estatisticas = resultado.get('estatisticas', {})
            
            # Formatar estat√≠sticas
            stats_text = f"""
            üìä **Estat√≠sticas da Anonimiza√ß√£o:**
            ‚Ä¢ Entidades detectadas: {len(entidades_detectadas)}
            ‚Ä¢ Palavras processadas: {estatisticas.get('palavras_processadas', 0)}
            ‚Ä¢ Tempo de processamento: {estatisticas.get('tempo_processamento', 0):.2f}s
            ‚Ä¢ Confian√ßa m√©dia: {estatisticas.get('confianca_media', 0):.2f}%
            """
            
            # Criar arquivo de sa√≠da
            nome_arquivo_saida = f"anonimizado_{Path(arquivo.name).stem}.txt"
            with open(nome_arquivo_saida, 'w', encoding='utf-8') as f:
                f.write(texto_anonimizado)
            
            return texto_anonimizado, stats_text, entidades_detectadas, nome_arquivo_saida
        else:
            return "‚ùå Erro na anonimiza√ß√£o. Verifique os par√¢metros.", None, None, None
            
    except Exception as e:
        return f"‚ùå Erro: {str(e)}", None, None, None

def analisar_entidades(texto):
    """Fun√ß√£o para analisar entidades em um texto"""
    try:
        if not texto.strip():
            return "‚ùå Por favor, insira um texto para an√°lise.", None
        
        resultado = anonimizador.analisar_entidades(texto)
        
        if resultado:
            entidades = resultado.get('entidades_detectadas', [])
            
            if entidades:
                # Criar tabela de entidades
                df = pd.DataFrame(entidades)
                return df, f"‚úÖ {len(entidades)} entidades detectadas no texto."
            else:
                return None, "‚ÑπÔ∏è Nenhuma entidade sens√≠vel detectada no texto."
        else:
            return None, "‚ùå Erro na an√°lise de entidades."
            
    except Exception as e:
        return None, f"‚ùå Erro: {str(e)}"

def configurar_modelo_llm(modelo, chave_api):
    """Fun√ß√£o para configurar o modelo LLM"""
    try:
        if not chave_api:
            return "‚ùå Por favor, insira uma chave de API v√°lida."
        
        sucesso = anonimizador.configurar_modelo_llm(modelo, chave_api)
        
        if sucesso:
            return f"‚úÖ Modelo {modelo} configurado com sucesso!"
        else:
            return f"‚ùå Erro ao configurar o modelo {modelo}."
            
    except Exception as e:
        return f"‚ùå Erro: {str(e)}"

def obter_estatisticas():
    """Fun√ß√£o para obter estat√≠sticas do sistema"""
    try:
        stats = anonimizador.obter_estatisticas()
        
        if stats:
            stats_text = f"""
            üìà **Estat√≠sticas do Sistema:**
            
            üîç **An√°lises Realizadas:**
            ‚Ä¢ Total de documentos processados: {stats.get('total_documentos', 0)}
            ‚Ä¢ Total de entidades detectadas: {stats.get('total_entidades', 0)}
            ‚Ä¢ Tempo m√©dio de processamento: {stats.get('tempo_medio', 0):.2f}s
            
            üéØ **Precis√£o:**
            ‚Ä¢ Taxa de detec√ß√£o: {stats.get('taxa_deteccao', 0):.2f}%
            ‚Ä¢ Falsos positivos: {stats.get('falsos_positivos', 0):.2f}%
            
            üíæ **Recursos:**
            ‚Ä¢ Mem√≥ria utilizada: {stats.get('memoria_utilizada', 0):.2f} MB
            ‚Ä¢ Cache hit rate: {stats.get('cache_hit_rate', 0):.2f}%
            """
            return stats_text
        else:
            return "‚ÑπÔ∏è Nenhuma estat√≠stica dispon√≠vel no momento."
            
    except Exception as e:
        return f"‚ùå Erro ao obter estat√≠sticas: {str(e)}"

def limpar_cache():
    """Fun√ß√£o para limpar o cache do sistema"""
    try:
        anonimizador.limpar_cache()
        return "‚úÖ Cache limpo com sucesso!"
    except Exception as e:
        return f"‚ùå Erro ao limpar cache: {str(e)}"

def exportar_resultado(texto_anonimizado, formato):
    """Fun√ß√£o para exportar resultado"""
    try:
        if not texto_anonimizado or texto_anonimizado.startswith("‚ùå"):
            return None, "‚ùå Nenhum texto anonimizado para exportar."
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        if formato == "TXT":
            nome_arquivo = f"anonimizado_{timestamp}.txt"
            with open(nome_arquivo, 'w', encoding='utf-8') as f:
                f.write(texto_anonimizado)
            return nome_arquivo, f"‚úÖ Arquivo exportado: {nome_arquivo}"
        
        elif formato == "JSON":
            nome_arquivo = f"anonimizado_{timestamp}.json"
            dados = {
                "texto_anonimizado": texto_anonimizado,
                "timestamp": timestamp,
                "versao": "1.0"
            }
            with open(nome_arquivo, 'w', encoding='utf-8') as f:
                json.dump(dados, f, ensure_ascii=False, indent=2)
            return nome_arquivo, f"‚úÖ Arquivo exportado: {nome_arquivo}"
        
        else:
            return None, "‚ùå Formato n√£o suportado."
            
    except Exception as e:
        return None, f"‚ùå Erro ao exportar: {str(e)}"

# Criar a interface Gradio
def create_interface():
    """Cria a interface principal da aplica√ß√£o"""
    
    with gr.Blocks(
        title=TITLE,
        theme=gr.themes.Soft(
            primary_hue="blue",
            secondary_hue="gray",
            neutral_hue="slate"
        ),
        css="""
        .gradio-container {
            max-width: 1200px !important;
            margin: 0 auto !important;
        }
        .header {
            text-align: center;
            margin-bottom: 2rem;
        }
        """
    ) as interface:
        
        # Cabe√ßalho
        create_header()
        
        # Abas principais
        with gr.Tabs():
            
            # Aba: Anonimiza√ß√£o de Texto
            with gr.Tab("üìù Anonimiza√ß√£o de Texto"):
                gr.Markdown("### Anonimize texto diretamente na interface")
                
                with gr.Row():
                    with gr.Column(scale=2):
                        texto_input = gr.Textbox(
                            label="üìÑ Texto para Anonimizar",
                            placeholder="Cole aqui o texto que deseja anonimizar...",
                            lines=10,
                            max_lines=20
                        )
                        
                        with gr.Row():
                            modelo_llm = gr.Dropdown(
                                choices=["openai", "claude", "gemini", "groq", "ollama"],
                                value="openai",
                                label="ü§ñ Modelo LLM",
                                info="Selecione o modelo de IA para anonimiza√ß√£o"
                            )
                            
                            nivel_anonimizacao = gr.Dropdown(
                                choices=["baixo", "medio", "alto"],
                                value="medio",
                                label="üõ°Ô∏è N√≠vel de Anonimiza√ß√£o",
                                info="N√≠vel de prote√ß√£o dos dados"
                            )
                        
                        with gr.Row():
                            idioma = gr.Dropdown(
                                choices=["pt", "en", "es"],
                                value="pt",
                                label="üåç Idioma",
                                info="Idioma do texto"
                            )
                            
                            chave_api = gr.Textbox(
                                label="üîë Chave da API",
                                placeholder="Insira sua chave de API (opcional)",
                                type="password"
                            )
                        
                        btn_anonimizar = gr.Button(
                            "üöÄ Anonimizar Texto",
                            variant="primary",
                            size="lg"
                        )
                    
                    with gr.Column(scale=2):
                        texto_output = gr.Textbox(
                            label="‚úÖ Texto Anonimizado",
                            lines=10,
                            max_lines=20,
                            interactive=False
                        )
                        
                        estatisticas_output = gr.Markdown(
                            label="üìä Estat√≠sticas",
                            value=""
                        )
                        
                        with gr.Row():
                            formato_export = gr.Dropdown(
                                choices=["TXT", "JSON"],
                                value="TXT",
                                label="üìÅ Formato de Exporta√ß√£o"
                            )
                            
                            btn_exportar = gr.Button(
                                "üíæ Exportar Resultado",
                                variant="secondary"
                            )
                        
                        arquivo_exportado = gr.File(
                            label="üìÑ Arquivo Exportado",
                            visible=False
                        )
                        
                        msg_exportacao = gr.Markdown("")
                
                # Conectar eventos
                btn_anonimizar.click(
                    fn=anonimizar_texto,
                    inputs=[texto_input, modelo_llm, chave_api, nivel_anonimizacao, idioma],
                    outputs=[texto_output, estatisticas_output]
                )
                
                btn_exportar.click(
                    fn=exportar_resultado,
                    inputs=[texto_output, formato_export],
                    outputs=[arquivo_exportado, msg_exportacao]
                )
            
            # Aba: Anonimiza√ß√£o de Arquivo
            with gr.Tab("üìÅ Anonimiza√ß√£o de Arquivo"):
                gr.Markdown("### Anonimize arquivos de texto")
                
                with gr.Row():
                    with gr.Column(scale=2):
                        arquivo_input = gr.File(
                            label="üìÅ Selecionar Arquivo",
                            file_types=[".txt"],
                            file_count="single"
                        )
                        
                        with gr.Row():
                            modelo_llm_arquivo = gr.Dropdown(
                                choices=["openai", "claude", "gemini", "groq", "ollama"],
                                value="openai",
                                label="ü§ñ Modelo LLM"
                            )
                            
                            nivel_anonimizacao_arquivo = gr.Dropdown(
                                choices=["baixo", "medio", "alto"],
                                value="medio",
                                label="üõ°Ô∏è N√≠vel de Anonimiza√ß√£o"
                            )
                        
                        with gr.Row():
                            idioma_arquivo = gr.Dropdown(
                                choices=["pt", "en", "es"],
                                value="pt",
                                label="üåç Idioma"
                            )
                            
                            chave_api_arquivo = gr.Textbox(
                                label="üîë Chave da API",
                                placeholder="Insira sua chave de API (opcional)",
                                type="password"
                            )
                        
                        btn_anonimizar_arquivo = gr.Button(
                            "üöÄ Anonimizar Arquivo",
                            variant="primary",
                            size="lg"
                        )
                    
                    with gr.Column(scale=2):
                        texto_arquivo_output = gr.Textbox(
                            label="‚úÖ Texto Anonimizado",
                            lines=10,
                            max_lines=20,
                            interactive=False
                        )
                        
                        estatisticas_arquivo_output = gr.Markdown(
                            label="üìä Estat√≠sticas",
                            value=""
                        )
                        
                        arquivo_saida = gr.File(
                            label="üìÑ Arquivo de Sa√≠da",
                            visible=False
                        )
                
                # Conectar eventos
                btn_anonimizar_arquivo.click(
                    fn=anonimizar_arquivo,
                    inputs=[arquivo_input, modelo_llm_arquivo, chave_api_arquivo, nivel_anonimizacao_arquivo, idioma_arquivo],
                    outputs=[texto_arquivo_output, estatisticas_arquivo_output, arquivo_saida]
                )
            
            # Aba: An√°lise de Entidades
            with gr.Tab("üîç An√°lise de Entidades"):
                gr.Markdown("### Analise entidades sens√≠veis em um texto")
                
                with gr.Row():
                    with gr.Column(scale=2):
                        texto_analise = gr.Textbox(
                            label="üìÑ Texto para An√°lise",
                            placeholder="Cole aqui o texto para an√°lise de entidades...",
                            lines=8,
                            max_lines=15
                        )
                        
                        btn_analisar = gr.Button(
                            "üîç Analisar Entidades",
                            variant="primary",
                            size="lg"
                        )
                    
                    with gr.Column(scale=2):
                        tabela_entidades = gr.DataFrame(
                            label="üìä Entidades Detectadas",
                            headers=["Tipo", "Texto", "Confian√ßa", "Posi√ß√£o"],
                            visible=False
                        )
                        
                        msg_analise = gr.Markdown("")
                
                # Conectar eventos
                btn_analisar.click(
                    fn=analisar_entidades,
                    inputs=[texto_analise],
                    outputs=[tabela_entidades, msg_analise]
                )
            
            # Aba: Configura√ß√µes
            with gr.Tab("‚öôÔ∏è Configura√ß√µes"):
                gr.Markdown("### Configure o sistema e modelos")
                
                with gr.Row():
                    with gr.Column(scale=1):
                        gr.Markdown("#### ü§ñ Configura√ß√£o de Modelo LLM")
                        
                        modelo_config = gr.Dropdown(
                            choices=["openai", "claude", "gemini", "groq", "ollama"],
                            value="openai",
                            label="Modelo"
                        )
                        
                        chave_api_config = gr.Textbox(
                            label="Chave da API",
                            placeholder="Insira sua chave de API",
                            type="password"
                        )
                        
                        btn_configurar = gr.Button(
                            "üîß Configurar Modelo",
                            variant="primary"
                        )
                        
                        msg_config = gr.Markdown("")
                    
                    with gr.Column(scale=1):
                        gr.Markdown("#### üõ†Ô∏è Manuten√ß√£o do Sistema")
                        
                        btn_estatisticas = gr.Button(
                            "üìä Ver Estat√≠sticas",
                            variant="secondary"
                        )
                        
                        btn_limpar_cache = gr.Button(
                            "üßπ Limpar Cache",
                            variant="secondary"
                        )
                        
                        msg_sistema = gr.Markdown("")
                
                # Conectar eventos
                btn_configurar.click(
                    fn=configurar_modelo_llm,
                    inputs=[modelo_config, chave_api_config],
                    outputs=[msg_config]
                )
                
                btn_estatisticas.click(
                    fn=obter_estatisticas,
                    outputs=[msg_sistema]
                )
                
                btn_limpar_cache.click(
                    fn=limpar_cache,
                    outputs=[msg_sistema]
                )
            
            # Aba: Sobre
            with gr.Tab("‚ÑπÔ∏è Sobre"):
                gr.Markdown("""
                ## üîí AnonimizaJud - Sistema de Anonimiza√ß√£o para Documentos Jur√≠dicos
                
                ### üìã Descri√ß√£o
                O AnonimizaJud √© um sistema inteligente de anonimiza√ß√£o de documentos jur√≠dicos que utiliza 
                tecnologias de Intelig√™ncia Artificial para proteger dados sens√≠veis, garantindo conformidade 
                com a LGPD e sigilo profissional.
                
                ### üöÄ Funcionalidades Principais
                - **Anonimiza√ß√£o Inteligente**: Detecta e protege automaticamente dados sens√≠veis
                - **M√∫ltiplos Modelos de IA**: Suporte a OpenAI, Claude, Gemini, Groq e Ollama
                - **An√°lise de Entidades**: Identifica CPF, OAB, CEP, CNH, SIAPE e outros dados sens√≠veis
                - **Processamento de Arquivos**: Suporte a arquivos de texto
                - **Exporta√ß√£o**: M√∫ltiplos formatos de sa√≠da
                
                ### üõ°Ô∏è Recursos de Seguran√ßa
                - Detec√ß√£o autom√°tica de entidades sens√≠veis
                - M√∫ltiplos n√≠veis de anonimiza√ß√£o
                - Cache seguro para otimiza√ß√£o
                - Logs de auditoria
                
                ### üîß Tecnologias Utilizadas
                - **Microsoft Presidio**: Framework de anonimiza√ß√£o
                - **SpaCy**: Processamento de linguagem natural
                - **Gradio**: Interface web moderna
                - **Python**: Linguagem de programa√ß√£o
                
                ### üìö Casos de Uso
                - Documentos judiciais
                - Peti√ß√µes e recursos
                - Laudos periciais
                - Contratos e acordos
                - Relat√≥rios confidenciais
                
                ### üìû Suporte
                Para d√∫vidas ou suporte t√©cnico, entre em contato com a equipe de desenvolvimento.
                
                ---
                **Vers√£o**: 1.0.0 | **Desenvolvido com** ‚ù§Ô∏è para a comunidade jur√≠dica
                """)
        
        # Rodap√©
        gr.Markdown("---")
        gr.Markdown(
            "<div style='text-align: center; color: #666; font-size: 0.9rem;'>"
            "üîí AnonimizaJud - Sistema de Anonimiza√ß√£o para Documentos Jur√≠dicos | "
            "Desenvolvido com ‚ù§Ô∏è para a comunidade jur√≠dica"
            "</div>"
        )
    
    return interface

# Fun√ß√£o principal
if __name__ == "__main__":
    # Criar e lan√ßar a interface
    interface = create_interface()
    interface.launch(
        server_name="0.0.0.0",
        server_port=7860,
        share=False,
        show_error=True,
        show_tips=True,
        quiet=False
    )
